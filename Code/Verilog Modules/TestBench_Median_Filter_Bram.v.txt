// testbench_median_filter_bram.v

`timescale 1ns / 1ps

module testbench_median_filter_bram();

    // Parameters
    parameter WIDTH = 640;
    parameter HEIGHT = 480;
    parameter NUM_PIXELS = WIDTH * HEIGHT;

    // Clock and reset
    reg clk = 0;
    reg rst_n = 0;
    reg start = 0;

    // BRAM interfaces
    wire [15:0] in_addr;
    wire [23:0] in_data;

    wire [15:0] out_addr;
    wire [23:0] out_data;
    wire out_we;

    wire done;

    // Instantiate input BRAM
    reg [23:0] image_mem [0:NUM_PIXELS-1]; // Input image data
    assign in_data = image_mem[in_addr];

    // Output BRAM memory
    reg [23:0] out_mem [0:NUM_PIXELS-1];

    // Write logic to simulate output BRAM behavior
    always @(posedge clk) begin
        if (out_we) begin
            out_mem[out_addr] <= out_data;
        end
    end

    // DUT instantiation
    median_filter_bram #(WIDTH, HEIGHT) dut (
        .clk(clk),
        .rst_n(rst_n),
        .start(start),
        .in_addr(in_addr),
        .in_data(in_data),
        .out_addr(out_addr),
        .out_data(out_data),
        .out_we(out_we),
        .done(done)
    );

    // Clock generation
    always #5 clk = ~clk; // 100 MHz

    // Load image into input BRAM
    initial begin
        $display("Loading input image...");
        $readmemh("rgb_imag.mem", image_mem); // You must generate this file
        $display("Starting simulation...");

        rst_n = 0;
        #20;
        rst_n = 1;
        #20;

        start = 1;
        #10;
        start = 0;

        // Wait until done
        wait(done);
        $display("Filter operation complete.");

        // Dump output to file
        $writememh("output_image.hex", out_mem);
        $finish;
    end

endmodule
